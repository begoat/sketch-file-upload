var onRun = function(context) {
    
    // General declarations
    
    var padding = 100
    
    var document = context.document
    var defaults = NSUserDefaults.standardUserDefaults()
    var defaultsKey = "VDExportPagesToPNG"
    var defaultsDict = defaults.objectForKey(defaultsKey) ? defaults.objectForKey(defaultsKey).mutableCopy() : NSMutableDictionary.dictionary()
    
    var exportedCount = 0
    
    // Path Field
    var pathField = NSTextField.alloc().initWithFrame(NSMakeRect(0, 34, 244, 22))
    pathField.stringValue = pathString()
    pathField.selectable = false
    pathField.bezelStyle = NSTextFieldSquareBezel
    
    // Choose Path Button
    var choosePathButton = NSButton.alloc().initWithFrame(NSMakeRect(246, 28, 96, 32))
    choosePathButton.bezelStyle = NSRoundedBezelStyle
    choosePathButton.setButtonType(NSMomentaryPushInButton)
    choosePathButton.title = "Choose..."
    choosePathButton.setCOSJSTargetFunction(function chooseDirectory() {
                                            
                                            // Configuring save panel
                                            var openPanel = NSOpenPanel.openPanel()
                                            openPanel.canChooseFiles = false
                                            openPanel.canChooseDirectories = true
                                            
                                            // Launching panel
                                            var result = openPanel.runModal()
                                            if (result == NSFileHandlingPanelOKButton) {
                                                pathField.stringValue = openPanel.URL().path()
                                            }
                                            })

    // Background Color Label
    var backgroundColorLabel = NSTextField.alloc().initWithFrame(NSMakeRect(1, 3, 245, 17))
    backgroundColorLabel.stringValue = "Background Color"
    backgroundColorLabel.selectable = false
    backgroundColorLabel.drawsBackground = false
    backgroundColorLabel.bezeled = false
    
    // Background Color Well
    var backgroundColorWell = NSColorWell.alloc().initWithFrame(NSMakeRect(252, 0, 84, 23))
    backgroundColorWell.bordered = true
    backgroundColorWell.color = wellColor()
        
    // Display alert and handle result

        // Save current values to UserDefaults
        writeCurrentValuesToDefaultsDict()
        
        // Start working
        var pagesLoop = context.document.pages().objectEnumerator()
        while (item = pagesLoop.nextObject()) {
            var artboard = MSArtboardGroup.alloc().initWithFrame(rectWithPadding(item.contentBounds()))
            artboard.nodeName = item.name()
            artboard.hasBackgroundColor = true
            artboard.backgroundColor = MSColor.colorWithNSColor(wellColor())
            artboard.includeBackgroundColorInExport = true
            item.insertLayer_atIndex(artboard, 0)
            
            var exportFormat = MSExportFormat.formatWithScale_name_fileFormat(1.0, "", "png")
            artboard.exportOptions().insertExportFormat_atIndex(exportFormat, 0)
            var exportRequests = MSExportRequest.exportRequestsFromExportableLayer(artboard)
            document.saveExportRequest_toFile(exportRequests[0], pathString() + "/" + artboard.nodeName() + ".png")
            
            


            var imagePath = "/Users/william/Desktop/Part1.png";

            // var request = NSMutableURLRequest.alloc().init();
            // request.setHTTPMethod_("POST");
            // request.setURL_(NSURL.URLWithString_('http://localhost:8080'));
            // var responseData = NSURLConnection.sendSynchronousRequest_returningResponse_error_(request,nil,nil);
            // var stringResponse = NSString.alloc().initWithData_encoding_(responseData,NSUTF8StringEncoding]);
            // log(stringResponse);
            
            item.removeLayerAtIndex(0)
            exportedCount += 1
        }
    
    function curlTask(args) {
        // http://sketchplugins.com/d/75-ajax-fetch-api/4
        var task = NSTask.alloc().init();
        task.setLaunchPath("/usr/bin/curl");
        var args =  ["http://localhost:8080"]
        task.setArguments(args);
        var outputPipe = [NSPipe pipe];
        [task setStandardOutput:outputPipe];
        task.launch();

            // var responseData = [[outputPipe fileHandleForReading] readDataToEndOfFile];
            // var responseString = [[[NSString alloc] initWithData:responseData encoding:NSUTF8StringEncoding]];
            // var parsed = tryParseJSON(responseString);
            // log(parsed);
    }

    // Helper functions
    
    function rectWithPadding(rect) {
        rect.origin.x -= padding
        rect.origin.y -= padding
        rect.size.width += padding * 2
        rect.size.height += padding * 2
        
        return rect
    }
    
    function writeCurrentValuesToDefaultsDict() {
        defaultsDict["pathString"] = pathField.stringValue()
        
        var wellRGBColor = backgroundColorWell.color().colorUsingColorSpace(NSColorSpace.deviceRGBColorSpace());
        var colorString = wellRGBColor.redComponent() + " " + wellRGBColor.greenComponent() + " " + wellRGBColor.blueComponent() + " " + wellRGBColor.alphaComponent()
        defaultsDict["wellColor"] = colorString
        
        defaults.setObject_forKey(defaultsDict, defaultsKey)
        defaults.synchronize()
    }
    
    function pathString() {
        return defaultsDict["pathString"] ? defaultsDict["pathString"] : NSHomeDirectory() + "/Desktop"
    }
    
    function wellColor() {
        if (defaultsDict["wellColor"]) {
            var valuesArray = defaultsDict["wellColor"].componentsSeparatedByString(" ")
            return NSColor.colorWithDeviceRed_green_blue_alpha(valuesArray[0].floatValue(), valuesArray[1].floatValue(), valuesArray[2].floatValue(), valuesArray[3].floatValue())
        } else {
            return NSColor.whiteColor()
        }
    }
}
